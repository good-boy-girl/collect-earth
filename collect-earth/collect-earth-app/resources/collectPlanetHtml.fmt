<!DOCTYPE html>
<html ng-app="ce">

<head>
  <meta charset="utf-8" />
  <title>Planet Monthly basemaps</title>
  <script>
    document.write('<base href="' + document.location + '" />');
  </script>
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
  <script src="https://cdn.jsdelivr.net/gh/digidem/leaflet-side-by-side@gh-pages/leaflet-side-by-side.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="  crossorigin=""/>
  <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/angular_material/1.2.0/angular-material.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment-with-locales.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular-animate.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular-aria.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angular_material/1.2.0/angular-material.min.js"></script>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  <script>

    var apiKey = "${planetMapsKey}"

	var getFormattedDate = function( d ){
		const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
		const mo = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(d);
		const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
		console.log(`${ye}-${mo}-${da}`);
		return `${ye}-${mo}-${da}`;
	}

	var getTileUrl = function( year, month, geometry){

		var startDay = new Date();
		startDay.setFullYear(year, month, 1);

		var lastDay = new Date(startDay.getFullYear(), startDay.getMonth() + 1, 0);

		return $.ajax({
					type : "POST",
					url : "http://127.0.0.1:8028/earth/planet",
					async : false,
					data : {
							start: getFormattedDate( startDay ),
							end : getFormattedDate( lastDay ),
							itemTypes : ["PSScene3Band","PSScene4Band","REOrthoTile"], // , "REOrthoTile" RapidEye not working
							geometry : JSON.stringify( geometry )
					},
					success : function( data ) {
						  	if( data === ""){
						  		alert("No imagery for the dates selected");
						  	}
							return data;
					},
					error : function(data, textStatus, xhr) {
		                 //This shows status code eg. 403
		                 console.log("error", data.status);
		                 if( data.responseText.includes("401") ){
		                 	alert("Planet Authentication Error: Check that the Planet API Key used is correct in the Collect Earth properties dialog");
		                 }else{
		                 	alert("Error connecting to Planet servers " + data.responseText );
		                 }
						 return null;
		            }
				}
			).responseJSON;
	}


	var today = new Date();
	var nextMonth = new Date(today.setMonth(today.getMonth()));
	var prevMonth = new Date(today.setMonth(today.getMonth() -1 ));

	var firstMonth  = 0;
	var firstYear  = 2015;

	var firstYearSelected = 2017;
	var firstMonthSelected = 7;

	var lastMonth  =  nextMonth.getMonth();
	var lastYear  = nextMonth.getYear() + 1900;

	var lastMonthSelected  =  prevMonth.getMonth();
	var lastYearSelected  = prevMonth.getYear() + 1900;

  </script>
	<script>
	  var app = angular.module('ce', ['ngMaterial']);

	  app.controller('MainCtrl', function($scope) {

	  var monthFormat =  buildLocaleProvider("MMM-YYYY");
	  var ymdFormat =  buildLocaleProvider( "YYYY-MM-DD");
	  $scope.left = new Date( firstYearSelected, firstMonthSelected, 2 );

	  $scope.right = new Date( lastYearSelected, lastMonthSelected, 2 );

		function buildLocaleProvider(formatString) {
			return {
				formatDate: function (date) {
					if (date) return moment(date).format(formatString);
					else return null;
				},
				parseDate: function (dateString) {
					if (dateString) {
						var m = moment(dateString, formatString, true);
						return m.isValid() ? m.toDate() : new Date(NaN);
					}
					else return null;
				}
			};
		}


		function change() {
			if( sideBySide ){
				map.removeLayer( planetLeftLayer);
				map.removeLayer( planetRightLayer);

				loadSingleSide( $scope.left.getFullYear(), $scope.left.getMonth() , false);
				loadSingleSide( $scope.right.getFullYear(), $scope.right.getMonth() , true);
			}else{
				sideBySide = loadSideBySide(
					$scope.left.getFullYear(), $scope.left.getMonth(),
					$scope.right.getFullYear(), $scope.right.getMonth()
				)
			}
		}

	  $scope.change = change;


	  $scope.dateFields = [
					{
						type: 'date',
						required: false,
						binding: 'applicant.expectedGraduation',
						startView: 'month',
						label: 'Basemap Month',
						mode: 'month',
						locale: monthFormat,
						startDate : new Date( firstYear, firstMonth, 1),
						endDate : new Date( lastYear, lastMonth, 1),
						}
		];
	});

	</script>
      <style>
    body {
        margin: 0;
        padding: 0;
    }

    #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
		z-index: 1;
    }

	.controller-left {
		position: absolute;
		bottom: 0px;
		left : 15px;
		width: 15%;
		height: 100px;
		z-index: 100;
		align: left;
	}

	.controller-right {
		position: absolute;
		bottom: 0px;
		right: 15px;
		width: 15%;
		height: 100px;
		z-index: 100;
		align: right;

	}

	.background {
		background-color: yellow;
		opacity: 0.5;
	}

    </style>
</head>

<body layout="row" layout-wrap flex layout-fill layout-align="start start" ng-controller="MainCtrl">
	<div id='map' ></div>
	<div  class="controller-left">

	<md-input-container flex="100" layout="column">
	<div class="background">
          <div style="font-size: 10px; color: blue;" label ng-bind="::dateFields[0].label"></div>

          <md-datepicker ng-model="left"
                     ng-required="dateFields[0].required"
                     md-date-locale="dateFields[0].locale"
                     md-mode="{{dateFields[0].mode}}"
                     md-open-on-focus="true"
					 ng-change="change()"
					 md-min-date="dateFields[0].startDate"
					 md-max-date="dateFields[0].endDate"
					 md-open-on-focus
					 >
        </md-datepicker>
		</div>
    </md-input-container>

	</div>


    <div  class="controller-right">

	<md-input-container flex="100" layout="column">
	<div class="background">
          <div style="font-size: 10px; color: blue;" label ng-bind="::dateFields[0].label"></div>

                    <md-datepicker ng-model="right"
                     ng-required="dateFields[0].required"
                     md-date-locale="dateFields[0].locale"
                     md-mode="{{dateFields[0].mode}}"
                     md-open-on-focus="true"
					 ng-change="change()"
					 md-min-date="dateFields[0].startDate"
					 md-max-date="dateFields[0].endDate"
					 md-open-on-focus
					 >
        </md-datepicker>
		</div>
    </md-input-container>

	</div>

    <script>

    var map = L.map('map');

	var latlngs = [
	// create a red polyline from an array of LatLng points
			<#list placemark.multiShape as shp>
             [
            	<#list shp as coord>
				[${coord.latitude},${coord.longitude}],
				</#list>
			],
			</#list>
           <#list placemark.points as square>
 				[
			     <#list square.shape as squareCorners>
			           [${squareCorners.latitude},${squareCorners.longitude}],
			     </#list>
		     	],
		     	<#if square.points?? >
					<#list square.points as innerpoint>
					[
						<#list innerpoint.shape as squareCorners>
					  [${squareCorners.latitude},${squareCorners.longitude}],
						</#list>
					],
					</#list>
				</#if>
		    </#list>
	];

	var boundaries = [
	// create a red polyline from an array of LatLng points
			<#list placemark.multiShape as shp>
             [
            	<#list shp as coord>
				[${coord.longitude},${coord.latitude}],
				</#list>
			]
			</#list>
			];

    var polyline = L.polyline(latlngs, {color: 'yellow'}).addTo(map);
	// Or center on the polygon
	var center = polyline.getBounds().getCenter()
	map.setView(center, 17)
	var sideBySide;
	var planetLeftLayer;
	var planetRightLayer;

	var loadSideBySide = function( leftYear, leftMonth, rightYear, rightMonth){

		planetLeftLayer = L.tileLayer(
		    getTileUrl(leftYear, leftMonth, boundaries),
		{
			attribution: 'Planet 2021',
		}).addTo(map);

		planetRightLayer = L.tileLayer(
			getTileUrl(rightYear, rightMonth, boundaries),
		{
			attribution: 'Planet 2021',
		}).addTo(map);

		return L.control.sideBySide(planetLeftLayer, planetRightLayer).addTo(map);
	}

	var loadSingleSide = function( year, month, rightSide){

		var planetLayer = L.tileLayer(
		    getTileUrl(year, month, boundaries),
		{
			attribution: 'Planet 2021',
		}).addTo(map);

		if( rightSide ){
			sideBySide.setRightLayers( planetLayer ).addTo(map);
		}else{
			sideBySide.setLeftLayers( planetLayer ).addTo(map);
		}
	}

	sideBySide = loadSideBySide( firstYearSelected, firstMonthSelected, lastYearSelected, lastMonthSelected );
    </script>
</body>

</html>
